# SPDX-License-Identifier: GPL-2.0
#
# kbuild file for firmware/
#

CONFIG_EXTRA_FIRMWARE_DIR="firmware"

# Create $(fwabs) from $(CONFIG_EXTRA_FIRMWARE_DIR) -- if it doesn't have a
# leading /, it's relative to $(srctree).
fwdir := $(subst $(quote),,$(CONFIG_EXTRA_FIRMWARE_DIR))
fwabs := $(addprefix $(srctree)/,$(filter-out /%,$(fwdir)))$(filter /%,$(fwdir))

fw-external-y := $(subst $(quote),,$(CONFIG_EXTRA_FIRMWARE))

# TSP FW
fw-external-$(CONFIG_TOUCHSCREEN_SEC_TS_Y771) += tsp_sec/y761_beyond0_phole.bin tsp_sec/y771_beyond1_phole.bin \
						tsp_sec/y771_beyond2_phole.bin tsp_sec/y771_beyondx_phole.bin
fw-external-$(CONFIG_TOUCHSCREEN_SEC_TS_Y771_D) += tsp_sec/y771_d1.bin tsp_sec/y771_d2.bin \
						tsp_sec/y771_d1_bringup.bin tsp_sec/y771_davinci_bringup.bin tsp_sec/y771_davinci_bringup2nd.bin
fw-external-$(CONFIG_TOUCHSCREEN_SEC_TS_Y761_SUB) += tsp_sec/y761_winner.bin
fw-external-$(CONFIG_TOUCHSCREEN_SEC_TS_Y771_R5) += tsp_sec/y771_r5.bin tsp_sec/y771_r5_1l.bin

fw-external-$(CONFIG_TOUCHSCREEN_FTS9)	+= tsp_stm/fts9cu80f_winner.fw
fw-external-$(CONFIG_TOUCHSCREEN_FTS9CU80F_B)	+= tsp_stm/fts9cu80f_bloom.fw
fw-external-$(CONFIG_TOUCHSCREEN_FTS1BA90A)	+= tsp_stm/fts1ba90a_gts5.fw
fw-external-$(CONFIG_TOUCHSCREEN_ZINITIX_ZTW522)	+= tsp_zinitix/ztw522_bloom.bin

fw-external-$(CONFIG_KEYBOARD_STM_FSR)	+= key_stm/fsr1ad04_davinci.fw key_stm/fsr1ad04_davinci_dv1.fw \
					key_stm/fsr1ad04_d1.fw key_stm/fsr1ad04_d2.fw

fw-shipped-$(CONFIG_EPEN_WACOM_W9020) += epen/w9020_d2.fw epen/w9020_d1.fw
ifdef CONFIG_SEC_FACTORY
fw-shipped-$(CONFIG_EPEN_WACOM_W9020) += epen/w9020_d2_unit.fw epen/w9020_d1_unit.fw
endif
fw-shipped-$(CONFIG_EPEN_WACOM_W9021) += epen/w9021_gts5l.fw epen/w9021_gts6x.fw

fw-external-$(CONFIG_TOUCHSCREEN_IST40XX) += tsp_imagis/ist40xx_a905g.bin tsp_imagis/ist40xx_a905g_cmcs.bin
fw-shipped-$(CONFIG_TOUCHSCREEN_MELFAS_MSS100) += tsp_melfas/mss100_r3.fw
# FPGA
fw-shipped-$(CONFIG_POGO_FPGA)	+= fpga/pogo_gts5l.fw

fw-external-$(CONFIG_WIRELESS_FIRMWARE_UPDATE) += mfc/mfc_fw_flash.bin
ifdef CONFIG_WIRELESS_FIRMWARE_UPDATE
fw-external-$(CONFIG_WIRELESS_CHARGER_MFC_S2MIW04) += mfc/mfc_fw_flash_s2miw04.bin
endif

ifdef CONFIG_SEC_BEYOND0QLTE_PROJECT
fw-external-$(CONFIG_SENSORS_A96T3X6) += abov/a96t356_beyond0qlte.bin
else ifdef CONFIG_SEC_BEYOND1QLTE_PROJECT
fw-external-$(CONFIG_SENSORS_A96T3X6) += abov/a96t356_beyond1qlte.bin
else ifdef CONFIG_SEC_BEYOND2QLTE_PROJECT
fw-external-$(CONFIG_SENSORS_A96T3X6) += abov/a96t356_beyond2qlte.bin
else ifdef CONFIG_SEC_GTS6L_PROJECT
fw-external-$(CONFIG_SENSORS_A96T3X6) += abov/a96t356_gts6llte.bin
fw-external-$(CONFIG_SENSORS_A96T3X6_WIFI) += abov/a96t356_wifi_gts6llte.bin
else ifdef CONFIG_SEC_GTS6LWIFI_PROJECT
fw-external-$(CONFIG_SENSORS_A96T3X6) += abov/a96t356_gts6lwifi.bin
fw-external-$(CONFIG_SENSORS_A96T3X6_WIFI) += abov/a96t356_wifi_gts6lwifi.bin
else ifdef CONFIG_SEC_GTS6X_PROJECT
fw-external-$(CONFIG_SENSORS_A96T3X6) += abov/a96t356_gts6x.bin
fw-external-$(CONFIG_SENSORS_A96T3X6_WIFI) += abov/a96t356_wifi_gts6x.bin
else
fw-external-$(CONFIG_SENSORS_A96T3X6) += abov/a96t356_beyond1qlte.bin
endif
# FIVE
ifeq ($(CONFIG_FIVE_TEE_DRIVER),y)
include $(srctree)/firmware/five/Makefile
endif

fw-shipped-all := $(fw-shipped-y) $(fw-shipped-m) $(fw-shipped-)

quiet_cmd_ihex  = IHEX    $@
      cmd_ihex  = $(OBJCOPY) -Iihex -Obinary $< $@

quiet_cmd_ihex2fw  = IHEX2FW $@
      cmd_ihex2fw  = $(objtree)/$(obj)/ihex2fw $< $@

quiet_cmd_h16tofw  = H16TOFW $@
      cmd_h16tofw  = $(objtree)/$(obj)/ihex2fw -w $< $@

quiet_cmd_fwbin = MK_FW   $@
      cmd_fwbin = FWNAME="$(patsubst firmware/%.gen.S,%,$@)";		     \
		  FWSTR="$(subst /,_,$(subst .,_,$(subst -,_,$(patsubst	     \
				firmware/%.gen.S,%,$@))))";		     \
		  ASM_WORD=$(if $(CONFIG_64BIT),.quad,.long);		     \
		  ASM_ALIGN=$(if $(CONFIG_64BIT),3,2);			     \
		  PROGBITS=$(if $(CONFIG_ARM),%,@)progbits;		     \
		  echo "/* Generated by firmware/Makefile */"		> $@;\
		  echo "    .section .rodata"				>>$@;\
		  echo "    .p2align $${ASM_ALIGN}"			>>$@;\
		  echo "_fw_$${FWSTR}_bin:"				>>$@;\
		  echo "    .incbin \"$(2)\""				>>$@;\
		  echo "_fw_end:"					>>$@;\
		  echo "   .section .rodata.str,\"aMS\",$${PROGBITS},1"	>>$@;\
		  echo "    .p2align $${ASM_ALIGN}"			>>$@;\
		  echo "_fw_$${FWSTR}_name:"				>>$@;\
		  echo "    .string \"$$FWNAME\""			>>$@;\
		  echo "    .section .builtin_fw,\"a\",$${PROGBITS}"	>>$@;\
		  echo "    .p2align $${ASM_ALIGN}"			>>$@;\
		  echo "    $${ASM_WORD} _fw_$${FWSTR}_name"		>>$@;\
		  echo "    $${ASM_WORD} _fw_$${FWSTR}_bin"		>>$@;\
		  echo "    $${ASM_WORD} _fw_end - _fw_$${FWSTR}_bin"	>>$@;

# One of these files will change, or come into existence, whenever
# the configuration changes between 32-bit and 64-bit. The .S files
# need to change when that happens.
wordsize_deps := $(wildcard include/config/64bit.h include/config/32bit.h \
		include/config/ppc32.h include/config/ppc64.h \
		include/config/superh32.h include/config/superh64.h \
		include/config/x86_32.h include/config/x86_64.h \
		firmware/Makefile)

$(patsubst %,$(obj)/%.gen.S, $(fw-shipped-y)): %: $(wordsize_deps)
	$(call cmd,fwbin,$(patsubst %.gen.S,%,$@))
$(patsubst %,$(obj)/%.gen.S, $(fw-external-y)): %: $(wordsize_deps)
	$(call cmd,fwbin,$(fwabs)/$(patsubst $(obj)/%.gen.S,%,$@))

# The .o files depend on the binaries directly; the .S files don't.
$(patsubst %,$(obj)/%.gen.o, $(fw-shipped-y)): %.gen.o: %
$(patsubst %,$(obj)/%.gen.o, $(fw-external-y)): $(obj)/%.gen.o: $(fwdir)/%

# .ihex is used just as a simple way to hold binary files in a source tree
# where binaries are frowned upon. They are directly converted with objcopy.
$(obj)/%: $(obj)/%.ihex
	$(call cmd,ihex)

obj-y				 += $(patsubst %,%.gen.o, $(fw-external-y))
obj-$(CONFIG_FIRMWARE_IN_KERNEL) += $(patsubst %,%.gen.o, $(fw-shipped-y))

ifeq ($(KBUILD_SRC),)
# Makefile.build only creates subdirectories for O= builds, but external
# firmware might live outside the kernel source tree
_dummy := $(foreach d,$(addprefix $(obj)/,$(dir $(fw-external-y))), $(shell [ -d $(d) ] || mkdir -p $(d)))
endif

targets := $(patsubst $(obj)/%,%, \
                                $(shell find $(obj) -name \*.gen.S 2>/dev/null))
# Without this, built-in.o won't be created when it's empty, and the
# final vmlinux link will fail.
obj- := dummy

# SPU signature verify
obj-y += spu_verify/